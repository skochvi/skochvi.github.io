<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Learning Diary of a Software Engineer</title>
    <link>/posts/</link>
    <description>Recent content in Posts on The Learning Diary of a Software Engineer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>/posts/list-of-software-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/list-of-software-concepts/</guid>
      <description>Software engineering, by merit (dint?) of the intensity (?) of its requirements, has encouraged (?) the exploration of
Dependency injection Examples:
Software frameworks (traditional context) Environment variables compiling with libraries Basically, say the same word, get different results; symbol resolution
Lookup Hashtables, any kind of programming lookup, really. NP-complete/satisfiability/constraints Dependency resolution discovering all possible code paths Caching Spatial locality is temporal locality State machine Function Information theory </description>
    </item>
    
  </channel>
</rss>
